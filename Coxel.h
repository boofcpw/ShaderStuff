#ifndef COXEL_H_
# define COXEL_CODE_H_

const char *Coxel_frag =
 "float n(float v,float f)"
 "{"
   "return min(v,f);"
 "}"
 "float f(float v,float f)"
 "{"
   "return max(v,f);"
 "}"
 "float t(float v,float f)"
 "{"
   "return max(v,-f);"
 "}"
 "float f(vec3 v,vec3 f,vec3 y)"
 "{"
   "return dot(v-y,f);"
 "}"
 "float v(vec3 v,vec3 z)"
 "{"
   "vec3 f=abs(v)-z;"
   "return min(max(f.x,max(f.y,f.z)),0.)+length(max(f,0.));"
 "}"
 "float s(vec3 v,float z)"
 "{"
   "return length(v)-z;"
 "}"
 "float x(vec3 v,vec2 f)"
 "{"
   "float i=length(v.xz);"
   "return dot(f,vec2(i,v.y));"
 "}"
 "float i(vec3 v,vec2 f)"
 "{"
   "vec2 i=vec2(length(v.xz)-f.x,v.y);"
   "return length(i)-f.y;"
 "}"
 "vec3 m(vec3 v,float f)"
 "{"
   "float m=sin(f),s=cos(f);"
   "vec3 i;"
   "i.x=v.x;"
   "i.y=s*v.y-m*v.z;"
   "i.z=m*v.y+s*v.z;"
   "return i;"
 "}"
 "vec3 e(vec3 v,float f)"
 "{"
   "float i=sin(f),s=cos(f);"
   "vec3 z;"
   "z.x=s*v.x+i*v.z;"
   "z.y=v.y;"
   "z.z=-i*v.x+s*v.z;"
   "return z;"
 "}"
 "float e(vec3 v,vec3 f,float z)"
 "{"
   "return length(max(abs(v)-f,0.))-z;"
 "}"
 "vec2 e(vec3 v)"
 "{"
   "v.y+=sin(iGlobalTime*2.)/2.-2.;"
   "v=m(v,sin(iGlobalTime*2.+.3)*.3-1.8);"
   "float f,z=s(v+vec3(.5,0.,0.),.9),y=s(v+vec3(-.5,0.,0.),.9),i=e(v+vec3(0,-1.2,0.),vec3(.15,1.5,.15),.5),x=s(v+vec3(0.,-mod(iGlobalTime*2.,5.),0.),.15);"
   "x=min(x,s(v+vec3(0.,-mod(iGlobalTime-.8,5.),0.),.1));"
   "x=min(x,s(v+vec3(0.,-mod(iGlobalTime-1.8,5.),0.),.15));"
   "f=min(i,z);"
   "f=min(f,y);"
   "float o=x<f?1.:0.;"
   "f=min(f,x);"
   "return vec2(f,o);"
 "}"
 "vec3 f(vec3 v)"
 "{"
   "float f=.0001;"
   "vec3 i;"
   "\n#if 0\n"
   "i.x=e(vec3(v.x+f,v.y,v.z)).x-e(vec3(v.x-f,v.y,v.z)).x;"
   "i.y=e(vec3(v.x,v.y+f,v.z)).x-e(vec3(v.x,v.y-f,v.z)).x;"
   "i.z=e(vec3(v.x,v.y,v.z+f)).x-e(vec3(v.x,v.y,v.z-f)).x;"
   "\n#else\n"
   "vec2 m=e(v);"
   "float z=m.x;"
   "i.x=e(vec3(v.x+f,v.y,v.z)).x-z;"
   "i.y=e(vec3(v.x,v.y+f,v.z)).x-z;"
   "i.z=e(vec3(v.x,v.y,v.z+f)).x-z;"
   "\n#endif\n"
   "return normalize(i);"
 "}"
 "float r(vec3 v,vec3 f)"
 "{"
   "const int z=3;"
   "const float i=.5;"
   "float x=0.,s=1.;"
   "for(int y=1;y<=z;y++)"
     "{"
       "float m=float(y)/float(z)*i;"
       "x+=s*(m-e(v+f*m).x);"
       "s*=.5;"
     "}"
   "return clamp(1.-x,0.,1.);"
 "}"
 "vec3 e(vec3 v,vec3 f,vec3 i,vec3 z)"
 "{"
   "const vec3 x=vec3(4.,3.,5.);"
   "const float y=140.;"
   "vec3 s=normalize(x-v),m=normalize(i-v),o=normalize(m+s);"
   "float e=dot(f,s),d=max(0.,pow(dot(f,o),y))*float(e>0.);"
   "e=max(0.,e);"
   "float l=pow(1.-dot(f,m),5.),p=r(v,f);"
   "return vec3(e*p)*z;"
 "}"
 "vec3 f(vec3 v,vec3 f,out bool i,out int z)"
 "{"
   "const int x=128;"
   "const float y=.001;"
   "i=false;"
   "vec3 m=v,s=v;"
   "for(int r=0;r<x;r++)"
     "{"
       "vec2 n=e(m);"
       "float l=n.x;"
       "if(l<y)"
         "i=true,s=m,z=int(n.y);"
       "m+=l*f;"
     "}"
   "return s;"
 "}"
 "vec3 i(int v)"
 "{"
   "if(v==0)"
     "return vec3(.7,.5,.1);"
   "else"
     " if(v==1)"
       "return vec3(sin(iGlobalTime*10.)+.4,sin(iGlobalTime*3.)+.4,sin(iGlobalTime*17.)+.4);"
     "else"
       " return vec3(1.);"
 "}"
 "const vec3 z=vec3(.1);"
 "vec3 m(vec3 v)"
 "{"
   "return floor(v/z);"
 "}"
 "vec3 n(vec3 f)"
 "{"
   "return f*z;"
 "}"
 "vec3 e(vec3 v,vec3 f,out bool i,out vec3 x,out int y)"
 "{"
   "const int s=120;"
   "const float l=0.;"
   "vec3 r=m(v),o=sign(f),d=r+vec3(f.x>0.,f.y>0.,f.z>0.),c=(n(d)-v)/f,p=z/abs(f),t=r;"
   "i=false;"
   "float b=0.;"
   "for(int g=0;g<s;g++)"
     "{"
       "vec2 a=e(n(r));"
       "float u=a.x;"
       "if(u<=l&&!i)"
         "y=int(a.y),i=true,t=r;"
       "bool h=c.x<c.y,T=c.x<c.z,G=c.y<c.z;"
       "if(h&&T)"
         "{"
           "r.x+=o.x;"
           "c.x+=p.x;"
           "if(!i)"
             "x=vec3(-o.x,0.,0.),b=c.x;"
         "}"
       "else"
         " if(G&&!h)"
           "{"
             "r.y+=o.y;"
             "c.y+=p.y;"
             "if(!i)"
               "x=vec3(0.,-o.y,0.),b=c.y;"
           "}"
         "else"
           "{"
             "r.z+=o.z;"
             "c.z+=p.z;"
             "if(!i)"
               "x=vec3(0.,0.,-o.z),b=c.z;"
           "}"
       "\n#if 0\n"
       "if(r.x<0||r.x>=size.width||r.y<0||r.y>=size.height||r.z<0||r.z>=size.depth)"
         "{"
           "break;"
         "}"
       "\n#endif\n"
     "}"
   "return v+b*f;"
 "}"
 "vec3 r(vec3 f)"
 "{"
   "return vec3(.5);"
 "}"
 "void main()"
 "{"
   "vec2 v=gl_FragCoord.xy/iResolution.xy*2.-1.;"
   "float f=iResolution.x/iResolution.y;"
   "vec3 z=normalize(vec3(f*v.x,v.y,-2.)),x=vec3(0.,2.,7.);"
   "x+=z*2.;"
   "vec2 y=iMouse.xy/iResolution.xy;"
   "float s;"
   "s=-(1.-y.y)*1.5;"
   "z=m(z,s);"
   "x=m(x,s);"
   "s=4.5-(y.x-.5)*3.;"
   "z=e(z,s);"
   "x=e(x,s);"
   "bool o;"
   "vec3 l;"
   "int d=0;"
   "vec3 c=e(x,z,o,l,d),b;"
   "if(o)"
     "{"
       "b=e(c,l,x,i(d));"
       "\n#if 0\n"
       "vec3 p=normalize(x-c);"
       "float n=.1+.9*pow(1.-dot(l,p),5.);"
       "x=c+l*.2;"
       "z=reflect(-p,l);"
       "c=e(x,z,o,l,d);"
       "if(o)"
         "b+=e(c,l,x,i(d))*vec3(n);"
       "else"
         " b+=r(z)*vec3(n);"
       "\n#endif\n"
     "}"
   "else"
     " b=r(z);"
   "b*=.5+.5*smoothstep(2.,.5,dot(v,v));"
   "gl_FragColor=vec4(b,1.);"
 "}";

#endif // COXEL_CODE_H_
